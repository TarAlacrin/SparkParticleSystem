// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/WindNoise.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float4 _SingularityPosANDdt;
float4 _SuckstrInOutdistInOut;
float4 _SuckDampSphereMousedown;
float _Time;

float4 _GravityDirAndStr;

float4 _PartBounceFricDrag;

float4 _EmitVelRotXYapertureXY;
float4 _EmitPosRotXYapertureXY;
float4 _EmitVelPosVariance;
float4 _EmitPos;

float4 _PartAgeVariance;


float4 _WindDats;


RWStructuredBuffer<float3> WvertPos;
RWStructuredBuffer<float3> WvertVel;
StructuredBuffer<float3> RvertPos;
StructuredBuffer<float3> RvertVel;

RWStructuredBuffer<float2> WvertDat;
StructuredBuffer<float2> RvertDat;

AppendStructuredBuffer<int> AliveList;
AppendStructuredBuffer<int> AdeadList;



[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float truID = id.x; //+ id.x*id.y + id.x*id.y*id.z;
	float newage = RvertDat[truID].y - _SingularityPosANDdt.w;
	WvertDat[truID] = float2(RvertDat[truID].x, newage);

	if(RvertDat[truID].y > 0)
	{
		float3 lastPos = RvertPos[truID];
		float3 diff = lastPos - _SingularityPosANDdt.xyz;
		float dist = length(diff);
		float3 dir = -normalize(diff);

		dist = (dist-_SuckstrInOutdistInOut.z)*_SuckstrInOutdistInOut.w;

		
		//	lastVelocity * Dampening (1 when mouse down, 0.9 when up) + FORCE (direction * dist to singularity * Gravity force (1)  * isDown(0 if up) all timesDeltaTime
		float3 vel = RvertVel[truID]*_SuckDampSphereMousedown.y;

		vel *= lerp(_SuckDampSphereMousedown.x, 1, saturate(dist) );
		float3 newvel = dir*lerp(_SuckstrInOutdistInOut.x, _SuckstrInOutdistInOut.y, saturate(dist))*_SuckDampSphereMousedown.w;

		newvel += _GravityDirAndStr.xyz *_GravityDirAndStr.w*(saturate(lastPos.y*5.0))*_SuckDampSphereMousedown.w;


		//DELTATIME
		vel += newvel*_SingularityPosANDdt.w;
		 
		//BounceCalc
		float3 newpos = lastPos + vel*_SingularityPosANDdt.w*60;
		float bounce = abs((sign(newpos.y)-1)*0.5);
		lastPos.y = abs(newpos.y);
		
		//bounce calc and floor drag
		vel.y = lerp(vel.y, abs(vel.y*_PartBounceFricDrag.x),  bounce);//if it is bounce= flips the y velocity and multiplies it by the bounce coefficient
		vel.xz = lerp(vel.xz, vel.xz*_PartBounceFricDrag.y, bounce);
		
		//overallDrag
		vel -= vel.xyz*_PartBounceFricDrag.z * (60.0*_SingularityPosANDdt.w);//subtracts the drag variable


		//DO WIND
		//float3 windCalc = float3(0,0,0);
		//
		//
		//float3 timeVar = float3(_Time + 0.5*cos(_Time - 3.5341),   _Time,  _Time - 0.5*sin(_Time + 7.3311)) * _WindDats.z;
		//windCalc.x = SimplexDerivedJordan(lastPos.xyz*_WindDats.w, 4, timeVar , 0.16, 0.8, 4.22, 0.86, 0.29, 0.25, 1, 1, 1);
		//
		//timeVar = float3(_Time + 0.5*cos(-_Time - 6.3154), -_Time, -_Time + 0.5*sin(_Time + 2.2345)) * _WindDats.z + 1255.1256;
		//windCalc.y = SimplexDerivedJordan(lastPos.xyz*_WindDats.w, 4, timeVar , 0.16, 0.8, 4.22, 0.86, 0.29, 0.25, 1, 1, 1);
		//
		//timeVar = float3(_Time - 0.5*sin(-_Time + 1.3635),  _Time,  _Time - 0.5*cos(-_Time + 1.3145)) * _WindDats.z - 2135.3523;
		//windCalc.z = SimplexDerivedJordan(lastPos.xyz*_WindDats.w, 4, timeVar , 0.16, 0.8, 4.22, 0.86, 0.29, 0.25, 1, 1, 1);
		//
		//
		//float3 wind = rotDir(float3(0,0,1), windCalc.xy*100)*windCalc.z;
		//
		//
		////float dotvw = 1-dot(normalize(wind),vel) *0.5 + 0.5;



	

		WvertVel[truID] = vel;
		WvertPos[truID] = lastPos + vel*_SingularityPosANDdt.w*60; //= vel;






		if(newage > 0)
			AliveList.Append(truID);
		else
			AdeadList.Append(truID);
	}


}



#pragma kernel CSSpawnCone
ConsumeStructuredBuffer<int> CdeadList;


float nrand(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453 + _Time);
}



float3 randDir(float3 startDir, float2 maxhorzAngles, float2 randuv)
{
	//x' = x cos f - y sin f
	//y' = y cos f + x sin f
	float3 newDir = float3(0,0,1);
	 
	//maxhorzAngles *= 2*PI;

	float rand1 = nrand(randuv);
	rand1 = nrand(randuv + float2(rand1, 0.1789 +_SingularityPosANDdt.w));
	float rand2 = nrand(randuv*float2(-1,1.1*rand1));

	rand1 = (rand1-0.5)*maxhorzAngles.x;
	rand2 = (rand2-0.5)*maxhorzAngles.y;

	newDir = rotDir(startDir, float2(rand1, rand2));

	return newDir;
}


[numthreads(64,1,1)]
void CSSpawnCone(uint3 id : SV_DispatchThreadID)
{
	int truID = CdeadList.Consume();
	float2 randuv = float2((_SingularityPosANDdt.w*60-1)*5.0 + id.x*0.03, truID*0.07);
	
	float rand1 = nrand(-randuv);
	rand1 = nrand(randuv - float2(rand1, 1.0289 -_SingularityPosANDdt.w));

	float rand2 = nrand(randuv - float2(-1.1,1.1*rand1));
	float rand3 = nrand(randuv + float2(-rand1, frac(rand2 - id.x*0.17)));
	rand2 = nrand(randuv - float2(rand3,rand2) + _SingularityPosANDdt.w - id.x*0.04 + truID*0.05);
	
	WvertPos[truID] = randDir(rotDir(float3(0,0,1),_EmitPosRotXYapertureXY.xy), _EmitPosRotXYapertureXY.zw, randuv )*(_EmitVelPosVariance.z + (rand3)*_EmitVelPosVariance.w ) + _EmitPos.xyz;

	rand3 = nrand(randuv - float2(-rand2 +_SingularityPosANDdt.w, rand3 -truID*0.05 ));

	WvertVel[truID] = randDir(rotDir(float3(0,0,1),_EmitVelRotXYapertureXY.xy), _EmitVelRotXYapertureXY.zw, randuv - float2(rand2, rand1))*(_EmitVelPosVariance.x + (rand3)*_EmitVelPosVariance.y );

	rand1 = nrand(randuv - float2(rand1 + rand2, rand3 - _SingularityPosANDdt.w));

	WvertDat[truID] = float2(0.0, 0.1 + abs(_PartAgeVariance.x + _PartAgeVariance.y*rand1) );
}






