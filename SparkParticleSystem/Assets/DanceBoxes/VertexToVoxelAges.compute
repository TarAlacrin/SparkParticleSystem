#include "Assets/DanceBoxes/ComputeIncludes.cginc"
#include "Assets/DanceBoxes/ComputeTriangleIncludes.cginc"

#pragma kernel CSMain

struct FullTriangleData
{
	float4 p1;
	float4 p2;
	float4 p3;
};

struct IntersectionData
{
	uint voxelIndex;
	uint triIndex;
};

StructuredBuffer<FullTriangleData> RTriangleVertexes;
//StructuredBuffer<float4> RVertexPositions;
AppendStructuredBuffer<IntersectionData> WAIntersections;

float4 _Dimensions;

uint Index(uint3 coordid)
{
	return coordid.x + coordid.y * _Dimensions.x + coordid.z * _Dimensions.x * _Dimensions.y;
}

int3 Coord(float index)
{
	return int3(mod(index, _Dimensions.x), mod(floor(index / _Dimensions.x), _Dimensions.y), floor(index / (_Dimensions.x * _Dimensions.y)));
}

float3 min3(float3 v1, float3 v2, float3 v3)
{
    float3 v0;
    v0.x = min(min(v1.x, v2.x), v3.x);
    v0.y = min(min(v1.y, v2.y), v3.y);
    v0.z = min(min(v1.z, v2.z), v3.z);
    return v0;
}

float3 max3(float3 v1, float3 v2, float3 v3)
{
    float3 v0;
    v0.x = max(max(v1.x, v2.x), v3.x);
    v0.y = max(max(v1.y, v2.y), v3.y);
    v0.z = max(max(v1.z, v2.z), v3.z);
    return v0;
}


FullTriangleData GetTriangleFromIndex(uint id)
{
    FullTriangleData tri = RTriangleVertexes[id];

    //FullTriangleData tri;
    //uint trindex = id * 3;
    //tri.p1 = RTriangleVertexes[trindex].xyzw;
    //tri.p2 = RTriangleVertexes[trindex+1].xyzw;
    //tri.p3 = RTriangleVertexes[trindex+2].xyzw;
	return tri;
}

void CheckIntersect(FullTriangleData tri, uint3 vxl3dIndex, uint vxlIndex, uint triIndex)
{
    float3 vxlCoords = float3(vxl3dIndex);
    int intersection = TriangleIntersectsUnitSquare(tri.p1.xyz - float3(vxlCoords), tri.p2.xyz - float3(vxlCoords), tri.p3.xyz - float3(vxlCoords));
	
	if (intersection)
	{
		IntersectionData intersectdat;
		intersectdat.voxelIndex = vxlIndex;
		intersectdat.triIndex = triIndex;
		WAIntersections.Append(intersectdat);
	}
}


//this gets run once for each triangle in the system
[numthreads(1, 1, 1)]
void CSMain(uint3 ind : SV_DispatchThreadID)
{
	FullTriangleData tri = GetTriangleFromIndex(ind.x);
    float3 minp = min3(tri.p1.xyz, tri.p2.xyz, tri.p3.xyz); //min(min(tri.p1.xyz, tri.p2.xyz), tri.p3.xyz);
    float3 maxp = max3(tri.p1.xyz, tri.p2.xyz, tri.p3.xyz); //max(max(tri.p1.xyz, tri.p2.xyz), tri.p3.xyz);
	maxp = min(ceil(maxp), _Dimensions.xyz);
	minp = max(floor(minp), float3(0,0,0));

	for (uint i = (uint)minp.x; i < (uint)maxp.x; i++)
	{
		for (uint j = (uint)minp.y; j < (uint)maxp.y; j++)
		{
			for (uint k = (uint)minp.z; k < (uint)maxp.z; k++)
			{
				uint3 ijk = uint3(i, j, k);
				uint voxelIndex = Index(ijk);
				CheckIntersect(tri, ijk, voxelIndex, ind.x);
			}
		}
	}
}
  


#pragma kernel CSSecond

StructuredBuffer<IntersectionData> RAIntersections;
uint IntersectionCount;

RWStructuredBuffer<float> WVoxelAgeBuffer;

//runs once for each point on the x,y grid
[numthreads(1,1,1)]
void CSSecond(uint3 id : SV_DispatchThreadID)
{
	uint initialIndex = Index(id);
	int3 coords = Coord(initialIndex);

	for (uint k = 0; k < (uint)_Dimensions.z; k++)
	{
		uint3 voxCoords = uint3(coords.x, coords.y, k);
		uint voxIndex = Index(voxCoords);

		float toset = 0;
		for (uint n = 0; n < IntersectionCount; n++)
		{
			if (RAIntersections[n].voxelIndex ==  voxIndex)
			{
				toset = IntersectionCount;
				n = IntersectionCount;
			}
		}
		WVoxelAgeBuffer[voxIndex] = toset;
	}
}


/*#pragma kernel CSSort

StructuredBuffer<float4> RARawVertexBuffer;
RWStructuredBuffer<float4> WSortedVertexBuffer;

uint _MaxCountVertexBuffer;
//sorts the raw append data into the sortedvertexbuffer;
[numthreads(1, 1, 1)]
void CSSort(uint3 id : SV_DispatchThreadID)
{
	uint initialIndex = Index(id);
	float4 posAndID = RARawVertexBuffer[id.x];

	if ((uint)posAndID.w < _MaxCountVertexBuffer && length(posAndID) > 0)
		WSortedVertexBuffer[(uint)(posAndID.w)] = posAndID.xyzw;
} */
