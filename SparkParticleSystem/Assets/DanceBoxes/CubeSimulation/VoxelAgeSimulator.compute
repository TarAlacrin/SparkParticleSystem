#pragma kernel CSMain
#include "Assets/DanceBoxes/ComputeIncludes.cginc"


StructuredBuffer<float> RNewCubeAges;
StructuredBuffer<float> ROldCubeAges;
RWStructuredBuffer<float> WCubeAges;

float _DeltaTime;


bool CheckCoordValid(int3 coords)
{
	float sizeCheck = ceil(saturate(coords.x - _Dimensions.x + 1) + saturate(coords.y - _Dimensions.y + 1) + saturate(coords.z - _Dimensions.z + 1));
	sizeCheck += saturate(1 - coords.x) + saturate(1 - coords.y) + saturate(1 - coords.z);
	return sizeCheck == 0;
}

float SafeGetOldAge(int3 coords)
{
	return ROldCubeAges[ClampedIndex(coords)];
	//my testing showed that this method of getting safe old age was almost the same level of performance, however, because of branching if statements, I chose to go with the other.
	//if (CheckCoordValid(coords))
	//	return ROldCubeAges[Index(coords)];
	//else
	//	return 0; 
}


[numthreads(THREADSIZE, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint index = Index(id);
	int3 coords = Coord(index);
	float newage = RNewCubeAges[index];


	float oldage = SafeGetOldAge(coords + int3(0, 0, 0) ) - _DeltaTime;

	WCubeAges[index] = saturate(saturate(oldage) + saturate(newage));
}